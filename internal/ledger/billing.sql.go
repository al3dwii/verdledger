// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: billing.sql

package ledger

import (
	"context"
	"database/sql"
)

const markSubscriptionPastDue = `-- name: MarkSubscriptionPastDue :exec
update billing.org_subscription
set status='past_due'
where stripe_subscription_id=$1
`

func (q *Queries) MarkSubscriptionPastDue(ctx context.Context, stripeSubscriptionID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, markSubscriptionPastDue, stripeSubscriptionID)
	return err
}

const upsertSubscription = `-- name: UpsertSubscription :exec
insert into billing.org_subscription
(org_id, stripe_customer_id, stripe_subscription_id, status, current_period_end)
values ($1,$2,$3,$4,$5)
on conflict (org_id) do update
set stripe_subscription_id=$3,
    status=$4,
    current_period_end=$5
`

type UpsertSubscriptionParams struct {
	OrgID                int64          `json:"org_id"`
	StripeCustomerID     sql.NullString `json:"stripe_customer_id"`
	StripeSubscriptionID sql.NullString `json:"stripe_subscription_id"`
	Status               sql.NullString `json:"status"`
	CurrentPeriodEnd     sql.NullTime   `json:"current_period_end"`
}

func (q *Queries) UpsertSubscription(ctx context.Context, arg UpsertSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, upsertSubscription,
		arg.OrgID,
		arg.StripeCustomerID,
		arg.StripeSubscriptionID,
		arg.Status,
		arg.CurrentPeriodEnd,
	)
	return err
}
