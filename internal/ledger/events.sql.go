// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package ledger

import (
	"context"
	"database/sql"
)

const insertEvent = `-- name: InsertEvent :one
INSERT INTO public.savings_event
  (org_id, project_id, cloud, region, sku, kwh, usd, kg, note)
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, org_id, ts, cloud, region, sku, kwh, usd, kg, note, project_id
`

type InsertEventParams struct {
	OrgID     sql.NullInt64  `json:"org_id"`
	ProjectID sql.NullInt64  `json:"project_id"`
	Cloud     sql.NullString `json:"cloud"`
	Region    sql.NullString `json:"region"`
	Sku       sql.NullString `json:"sku"`
	Kwh       sql.NullString `json:"kwh"`
	Usd       sql.NullString `json:"usd"`
	Kg        sql.NullString `json:"kg"`
	Note      sql.NullString `json:"note"`
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (SavingsEvent, error) {
	row := q.db.QueryRowContext(ctx, insertEvent,
		arg.OrgID,
		arg.ProjectID,
		arg.Cloud,
		arg.Region,
		arg.Sku,
		arg.Kwh,
		arg.Usd,
		arg.Kg,
		arg.Note,
	)
	var i SavingsEvent
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Ts,
		&i.Cloud,
		&i.Region,
		&i.Sku,
		&i.Kwh,
		&i.Usd,
		&i.Kg,
		&i.Note,
		&i.ProjectID,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, org_id, ts, cloud, region, sku, kwh, usd, kg, note, project_id
FROM   public.savings_event
WHERE  org_id = $1
ORDER  BY ts DESC
LIMIT  $2
OFFSET $3
`

type ListEventsParams struct {
	OrgID  sql.NullInt64 `json:"org_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]SavingsEvent, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.OrgID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavingsEvent
	for rows.Next() {
		var i SavingsEvent
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Ts,
			&i.Cloud,
			&i.Region,
			&i.Sku,
			&i.Kwh,
			&i.Usd,
			&i.Kg,
			&i.Note,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
