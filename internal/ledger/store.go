package ledger

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/jackc/pgx/v5/stdlib"
)

/* -------------------------------------------------------------------------- */
/*  Globals                                                                   */
/* -------------------------------------------------------------------------- */

var (
	DB     *pgxpool.Pool // raw pgx pool for callers that need it
	StdSQL *sql.DB       // stdlib wrapper for sqlc
	Q      *Queries      // sqlc handle
)

/* -------------------------------------------------------------------------- */
/*  Connect                                                                   */
/* -------------------------------------------------------------------------- */

// Connect initialises pgxpool, stdlib DB, and the sqlc Queries handle.
func Connect(ctx context.Context, dsn string) error {
	// 1. pgx pool -------------------------------------------------------------
	cfg, err := pgxpool.ParseConfig(dsn)
	if err != nil {
		return err
	}
	cfg.MaxConnIdleTime = 15 * time.Second

	pool, err := pgxpool.NewWithConfig(ctx, cfg)
	if err != nil {
		return err
	}
	DB = pool

	// 2. stdlib *sql.DB -------------------------------------------------------
	// stdlib.OpenDB copies the ConnConfig inside cfg and gives you a
	// database/sql compatible handle backed by pgx.
	StdSQL = stdlib.OpenDB(*cfg.ConnConfig)

	// Optional: set sane settings (connection limit mirrors pool)
	StdSQL.SetMaxIdleConns(int(cfg.MaxConns))
	StdSQL.SetConnMaxIdleTime(cfg.MaxConnIdleTime)

	// 3. sqlc handle ----------------------------------------------------------
	Q = New(StdSQL) // New() is auto-generated by sqlc

	return nil
}
